"use strict";(self.webpackChunkwebsite=self.webpackChunkwebsite||[]).push([[7369],{3905:function(e,t,a){a.d(t,{Zo:function(){return p},kt:function(){return h}});var n=a(7294);function s(e,t,a){return t in e?Object.defineProperty(e,t,{value:a,enumerable:!0,configurable:!0,writable:!0}):e[t]=a,e}function i(e,t){var a=Object.keys(e);if(Object.getOwnPropertySymbols){var n=Object.getOwnPropertySymbols(e);t&&(n=n.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),a.push.apply(a,n)}return a}function r(e){for(var t=1;t<arguments.length;t++){var a=null!=arguments[t]?arguments[t]:{};t%2?i(Object(a),!0).forEach((function(t){s(e,t,a[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(a)):i(Object(a)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(a,t))}))}return e}function o(e,t){if(null==e)return{};var a,n,s=function(e,t){if(null==e)return{};var a,n,s={},i=Object.keys(e);for(n=0;n<i.length;n++)a=i[n],t.indexOf(a)>=0||(s[a]=e[a]);return s}(e,t);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);for(n=0;n<i.length;n++)a=i[n],t.indexOf(a)>=0||Object.prototype.propertyIsEnumerable.call(e,a)&&(s[a]=e[a])}return s}var l=n.createContext({}),m=function(e){var t=n.useContext(l),a=t;return e&&(a="function"==typeof e?e(t):r(r({},t),e)),a},p=function(e){var t=m(e.components);return n.createElement(l.Provider,{value:t},e.children)},d={inlineCode:"code",wrapper:function(e){var t=e.children;return n.createElement(n.Fragment,{},t)}},c=n.forwardRef((function(e,t){var a=e.components,s=e.mdxType,i=e.originalType,l=e.parentName,p=o(e,["components","mdxType","originalType","parentName"]),c=m(a),h=s,u=c["".concat(l,".").concat(h)]||c[h]||d[h]||i;return a?n.createElement(u,r(r({ref:t},p),{},{components:a})):n.createElement(u,r({ref:t},p))}));function h(e,t){var a=arguments,s=t&&t.mdxType;if("string"==typeof e||s){var i=a.length,r=new Array(i);r[0]=c;var o={};for(var l in t)hasOwnProperty.call(t,l)&&(o[l]=t[l]);o.originalType=e,o.mdxType="string"==typeof e?e:s,r[1]=o;for(var m=2;m<i;m++)r[m]=a[m];return n.createElement.apply(null,r)}return n.createElement.apply(null,a)}c.displayName="MDXCreateElement"},8913:function(e,t,a){a.r(t),a.d(t,{assets:function(){return p},contentTitle:function(){return l},default:function(){return h},frontMatter:function(){return o},metadata:function(){return m},toc:function(){return d}});var n=a(7462),s=a(3366),i=(a(7294),a(3905)),r=["components"],o={id:"sqlalchemy",date:null,slug:"sqlalchemy",title:"SQLAlchemy",authors:[{name:"Ramsey Gavin",title:"Software Engineer II",url:"https://github.com/rgavin1",image_url:"https://github.com/rgavin1.png"}],tags:["python","orm","databases","api","relational"]},l=void 0,m={unversionedId:"databases/postgres/orms/sqlalchemy",id:"databases/postgres/orms/sqlalchemy",title:"SQLAlchemy",description:"What is a SQLAlchemy",source:"@site/docs/databases/postgres/orms/sqlalchemy.md",sourceDirName:"databases/postgres/orms",slug:"/databases/postgres/orms/sqlalchemy",permalink:"/docs/databases/postgres/orms/sqlalchemy",editUrl:"https://github.com/facebook/docusaurus/tree/main/packages/create-docusaurus/templates/shared/docs/databases/postgres/orms/sqlalchemy.md",tags:[{label:"python",permalink:"/docs/tags/python"},{label:"orm",permalink:"/docs/tags/orm"},{label:"databases",permalink:"/docs/tags/databases"},{label:"api",permalink:"/docs/tags/api"},{label:"relational",permalink:"/docs/tags/relational"}],version:"current",frontMatter:{id:"sqlalchemy",date:null,slug:"sqlalchemy",title:"SQLAlchemy",authors:[{name:"Ramsey Gavin",title:"Software Engineer II",url:"https://github.com/rgavin1",image_url:"https://github.com/rgavin1.png"}],tags:["python","orm","databases","api","relational"]},sidebar:"tutorialSidebar",previous:{title:"Object Relational Mappers (ORMs)",permalink:"/docs/databases/postgres/orms/orms"},next:{title:"Debugging",permalink:"/docs/debugging/intro"}},p={},d=[{value:"What is a SQLAlchemy",id:"what-is-a-sqlalchemy",level:2},{value:"How to connect FastAPI to SQLAlchemy",id:"how-to-connect-fastapi-to-sqlalchemy",level:2},{value:"File structure",id:"file-structure",level:3},{value:"Step 1: Create a database URL for SQLAlchemy",id:"step-1-create-a-database-url-for-sqlalchemy",level:3},{value:"Step 2: Create the SQLAlchemy engine",id:"step-2-create-the-sqlalchemy-engine",level:3},{value:"Step 3: Create a SessionLocal class",id:"step-3-create-a-sessionlocal-class",level:3},{value:"Step 4:  Create a Base class",id:"step-4--create-a-base-class",level:3},{value:"Step 5: Create the database models",id:"step-5-create-the-database-models",level:3},{value:"Step 6: Create model attributes/columns",id:"step-6-create-model-attributescolumns",level:3},{value:"Step 7: Create a dependency",id:"step-7-create-a-dependency",level:3},{value:"CRUD Methods",id:"crud-methods",level:2},{value:"GET itmes",id:"get-itmes",level:3},{value:"GET <strong>single</strong> item",id:"get-single-item",level:3},{value:"CREATE item",id:"create-item",level:3}],c={toc:d};function h(e){var t=e.components,a=(0,s.Z)(e,r);return(0,i.kt)("wrapper",(0,n.Z)({},c,a,{components:t,mdxType:"MDXLayout"}),(0,i.kt)("p",null,(0,i.kt)("img",{parentName:"p",src:"https://www.tutorialspoint.com/turbogears/images/sql.jpg",alt:null})),(0,i.kt)("h2",{id:"what-is-a-sqlalchemy"},"What is a SQLAlchemy"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},"One on the most popular python ORMs."),(0,i.kt)("li",{parentName:"ul"},"It's a standalone library."),(0,i.kt)("li",{parentName:"ul"},"It can be used with any other python web frameworks or python based applications")),(0,i.kt)("div",{className:"admonition admonition-caution alert alert--warning"},(0,i.kt)("div",{parentName:"div",className:"admonition-heading"},(0,i.kt)("h5",{parentName:"div"},(0,i.kt)("span",{parentName:"h5",className:"admonition-icon"},(0,i.kt)("svg",{parentName:"span",xmlns:"http://www.w3.org/2000/svg",width:"16",height:"16",viewBox:"0 0 16 16"},(0,i.kt)("path",{parentName:"svg",fillRule:"evenodd",d:"M8.893 1.5c-.183-.31-.52-.5-.887-.5s-.703.19-.886.5L.138 13.499a.98.98 0 0 0 0 1.001c.193.31.53.501.886.501h13.964c.367 0 .704-.19.877-.5a1.03 1.03 0 0 0 .01-1.002L8.893 1.5zm.133 11.497H6.987v-2.003h2.039v2.003zm0-3.004H6.987V5.987h2.039v4.006z"}))),"caution")),(0,i.kt)("div",{parentName:"div",className:"admonition-content"},(0,i.kt)("p",{parentName:"div"},"SQLAlchemy does not have an underlining driver. ",(0,i.kt)("strong",{parentName:"p"},(0,i.kt)("em",{parentName:"strong"},"Remember to install the appropriate database driver")),"."))),(0,i.kt)("div",{className:"admonition admonition-info alert alert--info"},(0,i.kt)("div",{parentName:"div",className:"admonition-heading"},(0,i.kt)("h5",{parentName:"div"},(0,i.kt)("span",{parentName:"h5",className:"admonition-icon"},(0,i.kt)("svg",{parentName:"span",xmlns:"http://www.w3.org/2000/svg",width:"14",height:"16",viewBox:"0 0 14 16"},(0,i.kt)("path",{parentName:"svg",fillRule:"evenodd",d:"M7 2.3c3.14 0 5.7 2.56 5.7 5.7s-2.56 5.7-5.7 5.7A5.71 5.71 0 0 1 1.3 8c0-3.14 2.56-5.7 5.7-5.7zM7 1C3.14 1 0 4.14 0 8s3.14 7 7 7 7-3.14 7-7-3.14-7-7-7zm1 3H6v5h2V4zm0 6H6v2h2v-2z"}))),"Connect FastAPI")),(0,i.kt)("div",{parentName:"div",className:"admonition-content"},(0,i.kt)("p",{parentName:"div"},(0,i.kt)("a",{parentName:"p",href:"https://fastapi.tiangolo.com/tutorial/sql-databases/#create-the-sqlalchemy-parts"},"FastAPI with SQLAlchemy")))),(0,i.kt)("h2",{id:"how-to-connect-fastapi-to-sqlalchemy"},"How to connect FastAPI to SQLAlchemy"),(0,i.kt)("h3",{id:"file-structure"},"File structure"),(0,i.kt)("div",{className:"admonition admonition-info alert alert--info"},(0,i.kt)("div",{parentName:"div",className:"admonition-heading"},(0,i.kt)("h5",{parentName:"div"},(0,i.kt)("span",{parentName:"h5",className:"admonition-icon"},(0,i.kt)("svg",{parentName:"span",xmlns:"http://www.w3.org/2000/svg",width:"14",height:"16",viewBox:"0 0 14 16"},(0,i.kt)("path",{parentName:"svg",fillRule:"evenodd",d:"M7 2.3c3.14 0 5.7 2.56 5.7 5.7s-2.56 5.7-5.7 5.7A5.71 5.71 0 0 1 1.3 8c0-3.14 2.56-5.7 5.7-5.7zM7 1C3.14 1 0 4.14 0 8s3.14 7 7 7 7-3.14 7-7-3.14-7-7-7zm1 3H6v5h2V4zm0 6H6v2h2v-2z"}))),"info")),(0,i.kt)("div",{parentName:"div",className:"admonition-content"},(0,i.kt)("p",{parentName:"div"},"The file ",(0,i.kt)("inlineCode",{parentName:"p"},"__init__.py")," is just an empty file, but it tells Python that sql_app with all its modules (Python files) is a package."))),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-bash"},"\u2514\u2500\u2500 sql_app\n    \u251c\u2500\u2500 __init__.py\n    \u251c\u2500\u2500 crud.py\n    \u251c\u2500\u2500 database.py\n    \u251c\u2500\u2500 main.py\n    \u251c\u2500\u2500 models.py\n    \u2514\u2500\u2500 schemas.py\n")),(0,i.kt)("h3",{id:"step-1-create-a-database-url-for-sqlalchemy"},"Step 1: Create a database URL for SQLAlchemy"),(0,i.kt)("p",null,(0,i.kt)("inlineCode",{parentName:"p"},"This grants access to the database server.")),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-python"},'SQLALCHEMY_DATABASE_URL = "postgresql://<username>:<password>@<ip-address/hostname>/<database_name>"\n')),(0,i.kt)("h3",{id:"step-2-create-the-sqlalchemy-engine"},"Step 2: Create the SQLAlchemy engine"),(0,i.kt)("p",null,(0,i.kt)("inlineCode",{parentName:"p"},"Responsible for establishing a connection to Postgres.")),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-python",metastring:'{1,5} title="sql_app/main.py"',"{1,5}":!0,title:'"sql_app/main.py"'},'from sqlalchemy import create_engine\n\nSQLALCHEMY_DATABASE_URL = "postgresql://<username>:<password>@<postgresserver>/<database_name>"\n\nengine = create_engine(SQLALCHEMY_DATABASE_URL)\n')),(0,i.kt)("h3",{id:"step-3-create-a-sessionlocal-class"},"Step 3: Create a SessionLocal class"),(0,i.kt)("p",null,(0,i.kt)("inlineCode",{parentName:"p"},"Responsible for communicating with the database")),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-python",metastring:'{2,8} title="sql_app/main.py"',"{2,8}":!0,title:'"sql_app/main.py"'},'from sqlalchemy import create_engine\nfrom sqlalchemy.orm import sessionmaker\n\nSQLALCHEMY_DATABASE_URL = "postgresql://<username>:<password>@<ip-address/hostname>/<database_name>"\n\nengine = create_engine(SQLALCHEMY_DATABASE_URL)\n\nSessionLocal = sessionmaker(autocommit=False)\n')),(0,i.kt)("h3",{id:"step-4--create-a-base-class"},"Step 4:  Create a Base class"),(0,i.kt)("p",null,(0,i.kt)("inlineCode",{parentName:"p"},"The Base class to create each of the database models or classes (the ORM models)")),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-python",metastring:'{2,11} title="sql_app/main.py"',"{2,11}":!0,title:'"sql_app/main.py"'},'from sqlalchemy import create_engine\nfrom sqlalchemy.ext.declarative import declarative_base\nfrom sqlalchemy.orm import sessionmaker\n\nSQLALCHEMY_DATABASE_URL = "postgresql://<username>:<password>@<ip-address/hostname>/<database_name>"\n\nengine = create_engine(SQLALCHEMY_DATABASE_URL)\n\nSessionLocal = sessionmaker(autocommit=False)\n\nBase = declarative_base()\n')),(0,i.kt)("h3",{id:"step-5-create-the-database-models"},"Step 5: Create the database models"),(0,i.kt)("p",null,"  ",(0,i.kt)("inlineCode",{parentName:"p"},"Create a file named models.py")),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-bash",metastring:"{6}","{6}":!0},"\u2514\u2500\u2500 venv\n\u2514\u2500\u2500 sql_app\n    \u251c\u2500\u2500 __init__.py\n    \u251c\u2500\u2500 crud.py\n    \u251c\u2500\u2500 database.py\n    \u251c\u2500\u2500 main.py\n    \u251c\u2500\u2500 models.py\n    \u2514\u2500\u2500 schemas.py\n")),(0,i.kt)("div",{className:"admonition admonition-note alert alert--secondary"},(0,i.kt)("div",{parentName:"div",className:"admonition-heading"},(0,i.kt)("h5",{parentName:"div"},(0,i.kt)("span",{parentName:"h5",className:"admonition-icon"},(0,i.kt)("svg",{parentName:"span",xmlns:"http://www.w3.org/2000/svg",width:"14",height:"16",viewBox:"0 0 14 16"},(0,i.kt)("path",{parentName:"svg",fillRule:"evenodd",d:"M6.3 5.69a.942.942 0 0 1-.28-.7c0-.28.09-.52.28-.7.19-.18.42-.28.7-.28.28 0 .52.09.7.28.18.19.28.42.28.7 0 .28-.09.52-.28.7a1 1 0 0 1-.7.3c-.28 0-.52-.11-.7-.3zM8 7.99c-.02-.25-.11-.48-.31-.69-.2-.19-.42-.3-.69-.31H6c-.27.02-.48.13-.69.31-.2.2-.3.44-.31.69h1v3c.02.27.11.5.31.69.2.2.42.31.69.31h1c.27 0 .48-.11.69-.31.2-.19.3-.42.31-.69H8V7.98v.01zM7 2.3c-3.14 0-5.7 2.54-5.7 5.68 0 3.14 2.56 5.7 5.7 5.7s5.7-2.55 5.7-5.7c0-3.15-2.56-5.69-5.7-5.69v.01zM7 .98c3.86 0 7 3.14 7 7s-3.14 7-7 7-7-3.12-7-7 3.14-7 7-7z"}))),"To run the application use \ud83d\udc47")),(0,i.kt)("div",{parentName:"div",className:"admonition-content"},(0,i.kt)("pre",{parentName:"div"},(0,i.kt)("code",{parentName:"pre",className:"language-bash"},"  uvicorn app.main:app --reload\n")))),(0,i.kt)("div",{className:"admonition admonition-tip alert alert--success"},(0,i.kt)("div",{parentName:"div",className:"admonition-heading"},(0,i.kt)("h5",{parentName:"div"},(0,i.kt)("span",{parentName:"h5",className:"admonition-icon"},(0,i.kt)("svg",{parentName:"span",xmlns:"http://www.w3.org/2000/svg",width:"12",height:"16",viewBox:"0 0 12 16"},(0,i.kt)("path",{parentName:"svg",fillRule:"evenodd",d:"M6.5 0C3.48 0 1 2.19 1 5c0 .92.55 2.25 1 3 1.34 2.25 1.78 2.78 2 4v1h5v-1c.22-1.22.66-1.75 2-4 .45-.75 1-2.08 1-3 0-2.81-2.48-5-5.5-5zm3.64 7.48c-.25.44-.47.8-.67 1.11-.86 1.41-1.25 2.06-1.45 3.23-.02.05-.02.11-.02.17H5c0-.06 0-.13-.02-.17-.2-1.17-.59-1.83-1.45-3.23-.2-.31-.42-.67-.67-1.11C2.44 6.78 2 5.65 2 5c0-2.2 2.02-4 4.5-4 1.22 0 2.36.42 3.22 1.19C10.55 2.94 11 3.94 11 5c0 .66-.44 1.78-.86 2.48zM4 14h5c-.23 1.14-1.3 2-2.5 2s-2.27-.86-2.5-2z"}))),"Tip")),(0,i.kt)("div",{parentName:"div",className:"admonition-content"},(0,i.kt)("p",{parentName:"div"},'SQLAlchemy uses the term "model" to refer to these classes and instances that interact with the database.'),(0,i.kt)("p",{parentName:"div"},'But Pydantic also uses the term "model" to refer to something different, the data validation, conversion, and documentation classes and instances.'))),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-python",metastring:'title="sql_app/models.py"',title:'"sql_app/models.py"'},'from .database import Base\n\n\nclass User(Base):\n    __tablename__ = "users"\n\nclass Item(Base):\n    __tablename__ = "items"\n')),(0,i.kt)("h3",{id:"step-6-create-model-attributescolumns"},"Step 6: Create model attributes/columns"),(0,i.kt)("p",null,"  ",(0,i.kt)("inlineCode",{parentName:"p"},"Add the items attributes")),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-python",metastring:'{1,7-10,15-18} title="sql_app/models.py"',"{1,7-10,15-18}":!0,title:'"sql_app/models.py"'},'from sqlalchemy import Boolean, Column, ForeignKey, Integer, String\nfrom .database import Base\n\nclass User(Base):\n    __tablename__ = "users"\n\n    id = Column(Integer, primary_key=True, index=True)\n    email = Column(String, unique=True, index=True)\n    hashed_password = Column(String)\n    is_active = Column(Boolean, default=True)\n\nclass Item(Base):\n    __tablename__ = "items"\n\n    id = Column(Integer, primary_key=True, index=True)\n    title = Column(String, index=True)\n    description = Column(String, index=True)\n    owner_id = Column(Integer, ForeignKey("users.id"))\n\n')),(0,i.kt)("h3",{id:"step-7-create-a-dependency"},"Step 7: Create a dependency"),(0,i.kt)("p",null,"  ",(0,i.kt)("inlineCode",{parentName:"p"},"To have an independent database session/connection (SessionLocal) per request, use the same session through all the request and then close it after the request is finished.")),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-python",metastring:'{13-19} title="sql_app/main.py"',"{13-19}":!0,title:'"sql_app/main.py"'},"from typing import List\n\nfrom fastapi import Depends, FastAPI, HTTPException\nfrom sqlalchemy.orm import Session\n\nfrom . import crud, models, schemas\nfrom .database import SessionLocal, engine\n\nmodels.Base.metadata.create_all(bind=engine)\n\napp = FastAPI()\n\n# Dependency\ndef get_db():\n    db = SessionLocal()\n    try:\n        yield db\n    finally:\n        db.close()\n")),(0,i.kt)("h2",{id:"crud-methods"},"CRUD Methods"),(0,i.kt)("h3",{id:"get-itmes"},"GET itmes"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-python",metastring:'{13-16} title="sql_app/main.py"',"{13-16}":!0,title:'"sql_app/main.py"'},'from fastapi import FastAPI, Depends\nfrom .database import engine\nimport psycopg2\n\nfrom . import models\nfrom sqlalchemy.orm import Session\nfrom .database import engine, get_db\n\nmodels.Base.metadata.create_all(bind=engine)\n\napp = FastAPI()\n\n@app.get("/table_name")\ndef get_table_name(db: Session = Depends(get_db)):\n    table_name = db.query(models.Tablename).all()\n    return {"data": table_name}\n')),(0,i.kt)("h3",{id:"get-single-item"},"GET ",(0,i.kt)("strong",{parentName:"h3"},"single")," item"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-python",metastring:'{14-18} title="sql_app/main.py"',"{14-18}":!0,title:'"sql_app/main.py"'},'from fastapi import FastAPI, Depends\nfrom .database import engine\nfrom . import models, schemas\nimport psycopg2\n\nfrom . import models\nfrom sqlalchemy.orm import Session\nfrom .database import engine, get_db\n\nmodels.Base.metadata.create_all(bind=engine)\n\napp = FastAPI()\n\n@app.get("/table_name/{item.id}")\ndef create_item(item_id: int, db: Session = Depends(get_db)):\n  db.add(sqlAchemy.models.TableItem(**item.dict()))\n  db.commit()\n  return {"status": "success"}\n')),(0,i.kt)("h3",{id:"create-item"},"CREATE item"),(0,i.kt)("p",null,"When the endpoint is called we'll hit the create_item function triggering a session. In this session we'll check the request for a body. THan we'll create a new item for the table than we'll (permenantly) write to the db.    "),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-python",metastring:'{14-18} title="sql_app/main.py"',"{14-18}":!0,title:'"sql_app/main.py"'},'from fastapi import FastAPI, Depends\nfrom .database import engine\nfrom . import models, schemas\nimport psycopg2\n\nfrom . import models\nfrom sqlalchemy.orm import Session\nfrom .database import engine, get_db\n\nmodels.Base.metadata.create_all(bind=engine)\n\napp = FastAPI()\n\n@app.post("/table_name")\ndef create_item(item: pydantic.Schema, db: Session = Depends(get_db)):\n  db.add(sqlAchemy.models.TableItem(**item.dict()))\n  db.commit()\n  return {"status": "success"}\n')),(0,i.kt)("div",{className:"admonition admonition-info alert alert--info"},(0,i.kt)("div",{parentName:"div",className:"admonition-heading"},(0,i.kt)("h5",{parentName:"div"},(0,i.kt)("span",{parentName:"h5",className:"admonition-icon"},(0,i.kt)("svg",{parentName:"span",xmlns:"http://www.w3.org/2000/svg",width:"14",height:"16",viewBox:"0 0 14 16"},(0,i.kt)("path",{parentName:"svg",fillRule:"evenodd",d:"M7 2.3c3.14 0 5.7 2.56 5.7 5.7s-2.56 5.7-5.7 5.7A5.71 5.71 0 0 1 1.3 8c0-3.14 2.56-5.7 5.7-5.7zM7 1C3.14 1 0 4.14 0 8s3.14 7 7 7 7-3.14 7-7-3.14-7-7-7zm1 3H6v5h2V4zm0 6H6v2h2v-2z"}))),"Response Status Code")),(0,i.kt)("div",{parentName:"div",className:"admonition-content"},(0,i.kt)("p",{parentName:"div"},"  Find tutorial for adding status codes to response. ",(0,i.kt)("a",{parentName:"p",href:"../../../api/python/status_codes/intro.md"},"Response Status Code")," "))))}h.isMDXComponent=!0}}]);